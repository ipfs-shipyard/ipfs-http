/*
 * IPFS API Documentation
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		"GET",
		"//",
		Index,
	},

	{
		"BitswapLedger",
		strings.ToUpper("Get"),
		"//bitswap/ledger/{peerId}",
		BitswapLedger,
	},

	{
		"BitswapReprovide",
		strings.ToUpper("Post"),
		"//bitswap/reprovide",
		BitswapReprovide,
	},

	{
		"BitswapStats",
		strings.ToUpper("Get"),
		"//bitswap/stats",
		BitswapStats,
	},

	{
		"BitswapUnwant",
		strings.ToUpper("Delete"),
		"//bitswap/wantlist/{cid}",
		BitswapUnwant,
	},

	{
		"BitswapWantlist",
		strings.ToUpper("Get"),
		"//bitswap/wantlist",
		BitswapWantlist,
	},

	{
		"ConfigGet",
		strings.ToUpper("Get"),
		"//config",
		ConfigGet,
	},

	{
		"ConfigPatch",
		strings.ToUpper("Patch"),
		"//config",
		ConfigPatch,
	},

	{
		"ConfigReplace",
		strings.ToUpper("Put"),
		"//config",
		ConfigReplace,
	},

	{
		"ConfigReset",
		strings.ToUpper("Delete"),
		"//config",
		ConfigReset,
	},

	{
		"DagCreate",
		strings.ToUpper("Post"),
		"//dag",
		DagCreate,
	},

	{
		"DagGet",
		strings.ToUpper("Get"),
		"//dag/{cid}",
		DagGet,
	},

	{
		"DagRemove",
		strings.ToUpper("Delete"),
		"//dag/{cid}",
		DagRemove,
	},

	{
		"DagUpdate",
		strings.ToUpper("Patch"),
		"//dag/{cid}",
		DagUpdate,
	},

	{
		"DhtFindPeer",
		strings.ToUpper("Get"),
		"//dht/peer/{peerId}",
		DhtFindPeer,
	},

	{
		"DhtFindProviders",
		strings.ToUpper("Get"),
		"//dht/providers/{cid}",
		DhtFindProviders,
	},

	{
		"DhtGet",
		strings.ToUpper("Get"),
		"//dht/{key}",
		DhtGet,
	},

	{
		"DhtProvide",
		strings.ToUpper("Post"),
		"//dht/provide",
		DhtProvide,
	},

	{
		"DhtPut",
		strings.ToUpper("Post"),
		"//dht/{key}",
		DhtPut,
	},

	{
		"DhtQuery",
		strings.ToUpper("Get"),
		"//dht/query/{peerId}",
		DhtQuery,
	},

	{
		"MiscellaneousDns",
		strings.ToUpper("Get"),
		"//dns/{path}",
		MiscellaneousDns,
	},

	{
		"FilesCreate",
		strings.ToUpper("Post"),
		"//files/{path}",
		FilesCreate,
	},

	{
		"FilesGet",
		strings.ToUpper("Get"),
		"//files/{path}",
		FilesGet,
	},

	{
		"FilesRemove",
		strings.ToUpper("Delete"),
		"//files/{path}",
		FilesRemove,
	},

	{
		"FilesReplace",
		strings.ToUpper("Put"),
		"//files/{path}",
		FilesReplace,
	},

	{
		"FilesUpdate",
		strings.ToUpper("Patch"),
		"//files/{path}",
		FilesUpdate,
	},

	{
		"KeyGenerate",
		strings.ToUpper("Post"),
		"//key",
		KeyGenerate,
	},

	{
		"KeyList",
		strings.ToUpper("Get"),
		"//key",
		KeyList,
	},

	{
		"KeyRemove",
		strings.ToUpper("Delete"),
		"//key/{name}",
		KeyRemove,
	},

	{
		"KeyRename",
		strings.ToUpper("Patch"),
		"//key/{name}",
		KeyRename,
	},

	{
		"NamePublish",
		strings.ToUpper("Post"),
		"//name",
		NamePublish,
	},

	{
		"NameResolve",
		strings.ToUpper("Get"),
		"//name/{name}",
		NameResolve,
	},

	{
		"PinAdd",
		strings.ToUpper("Post"),
		"//pins",
		PinAdd,
	},

	{
		"PinList",
		strings.ToUpper("Get"),
		"//pins",
		PinList,
	},

	{
		"PinRemove",
		strings.ToUpper("Delete"),
		"//pins/{hash}",
		PinRemove,
	},

	{
		"PubsubList",
		strings.ToUpper("Get"),
		"//pubsub/topics",
		PubsubList,
	},

	{
		"PubsubSubscribe",
		strings.ToUpper("Post"),
		"//pubsub/topics",
		PubsubSubscribe,
	},

	{
		"RepoGc",
		strings.ToUpper("Post"),
		"//repo/gc",
		RepoGc,
	},

	{
		"RepoStats",
		strings.ToUpper("Get"),
		"//repo",
		RepoStats,
	},

	{
		"SwarmAddrs",
		strings.ToUpper("Get"),
		"//swarm/connections",
		SwarmAddrs,
	},

	{
		"SwarmConnect",
		strings.ToUpper("Post"),
		"//swarm/connections",
		SwarmConnect,
	},

	{
		"SwarmDisconnect",
		strings.ToUpper("Delete"),
		"//swarm/connections/{address}",
		SwarmDisconnect,
	},

	{
		"SwarmInfo",
		strings.ToUpper("Get"),
		"//swarm/peer",
		SwarmInfo,
	},

	{
		"SwarmPeers",
		strings.ToUpper("Get"),
		"//swarm/peers",
		SwarmPeers,
	},

	{
		"SwarmPing",
		strings.ToUpper("Post"),
		"//swarm/peers/{peerId}/ping",
		SwarmPing,
	},
}
